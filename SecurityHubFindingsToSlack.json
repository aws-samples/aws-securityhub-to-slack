{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Demonstrates how to connect SecurityHub to your Slack channel. The template Installs a Lambda function that writes CW Events to a Slack incoming web hook. This relies on you creating an *incoming web hook* in your slack account and simply passing the URL as a parameter to this template",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Slack Configuration"
                    },
                    "Parameters": [
                        "IncomingWebHookURL",
                        "SlackChannel"
                    ]
                }
            ],
            "ParameterLabels": {
                "IncomingWebHookURL": {
                    "default": "Slack Incoming Web Hook URL"
                },
                "SlackChannel" : {
                    "default" : "Slack channel to send findings to"
                }
            }
        }
    },
    "Parameters": {
        "IncomingWebHookURL": {
            "Default": "https://hooks.slack.com/services/XXXXXX/YYYYY/REPLACE_WITH_YOURS",
            "Description": "Your unique Incoming Web Hook URL from slack service",
            "Type": "String"
        },
        "SlackChannel": {
            "Default": "#alerts",
            "Description": "The slack channel to send findings to",
            "Type": "String"
        }
    },
    "Resources": {
        "SecurityHubToSlackRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/service-role/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                ],
                "Policies": []
            }
        },
        "SecurityHubFindingsToSlack": {
        "DependsOn": "lambdafindingsToSlack",
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Name" : "SecurityHubFindingsToSlack",
                "Description": "CloudWatchEvents Rule to enable SecurityHub Findings in Slack ",
                "State": "ENABLED",
                "EventPattern" : { 
                    "source": ["aws.securityhub"],
                    "resources":  [{ "Fn::Join" : [ ":", [ "arn", "aws", "securityhub", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, { "Fn::Join" : [ "/", [ "action", "custom", "SendToSlack"] ] }]
            ]}]},
                "Targets": [{
                    "Arn": { "Fn::GetAtt" : ["lambdafindingsToSlack", "Arn"] },
                    "Id": "SecurityHubToSlackFunction"
                 }]
             }
        },
        "LambdaInvokePermission": {
            "DependsOn": ["lambdafindingsToSlack","SecurityHubFindingsToSlack"],
            "Type": "AWS::Lambda::Permission",
             "Properties": {
                 "Action": "lambda:InvokeFunction",
                 "Principal": "events.amazonaws.com",
                 "FunctionName": { "Fn::GetAtt" : ["lambdafindingsToSlack", "Arn"] },
                 "SourceArn": { "Fn::GetAtt": ["SecurityHubFindingsToSlack", "Arn"]}
            }
        },
        "lambdafindingsToSlack": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.handler",
                "Role": {"Fn::GetAtt" : ["SecurityHubToSlackRole", "Arn"] },
                "Code": {
                    "ZipFile" : {
                        "Fn::Join": [ "", [
                            "'use strict';\n",
                            "const AWS = require('aws-sdk');\n",
                            "const url = require('url');\n",
                            "const https = require('https');\n",
                            "\n",
                            "const webHookUrl = process.env['webHookUrl'];\n",
                            "const slackChannel = process.env.slackChannel;\n",
                            "\n",
                            "function postMessage(message, callback) {\n",
                            "const body = JSON.stringify(message);\n",
                            "const options = url.parse(webHookUrl);\n",
                            "options.method = 'POST';\n",
                            "options.headers = {\n",
                            "'Content-Type': 'application/json',\n",
                            "'Content-Length': Buffer.byteLength(body),\n",
                            "};\n",
                            "\n",
                            "const postReq = https.request(options, (res) => {\n",
                            "const chunks = [];\n",
                            "res.setEncoding('utf8');\n",
                            "res.on('data', (chunk) => chunks.push(chunk));\n",
                            "res.on('end', () => {\n",
                            "if (callback) {\n",
                            "callback({\n",
                            "body: chunks.join(''),\n",
                            "statusCode: res.statusCode,\n",
                            "statusMessage: res.statusMessage,\n",
                            "});\n",
                            "}\n",
                            "});\n",
                            "return res;\n",
                            "});\n",
                            "\n",
                            "postReq.write(body);\n",
                            "postReq.end();\n",
                            "}\n",
                            "\n",
                            "function processEvent(event, callback) {\n",
                            "const message = event;\n",
                            "const consoleUrl = `https://console.aws.amazon.com/securityhub`;\n",
                            "const finding = message.detail.findings[0].Types[0];\n",
                            "const findingDescription = message.detail.findings[0].Description;\n",
                            "const findingTime = message.detail.findings[0].UpdatedAt;\n",
                            "const findingTimeEpoch = Math.floor(new Date(findingTime) / 1000);\n",
                            "const account =  message.detail.findings[0].AwsAccountId;\n",
                            "const region =  message.detail.findings[0].Resources[0].Region;\n",
                            "const type = message.detail.findings[0].Resources[0].Type;\n",
                            "const messageId = message.detail.findings[0].Resources[0].Id;\n",
                            "const lastSeen = `<!date^${findingTimeEpoch}^{date} at {time} | ${findingTime}>`;\n",
                            "var color = '#7CD197';\n",
                            "var severity = '';\n",
                            "\n",
                            "if (1 <= message.detail.findings[0].Severity.Normalized && message.detail.findings[0].Severity.Normalized <= 39) {severity = 'LOW'; color ='#879596';}\n",
                            "else if (40 <= message.detail.findings[0].Severity.Normalized && message.detail.findings[0].Severity.Normalized <= 69) {severity = 'MEDIUM'; color = '#ed7211';}\n",
                            "else if (70 <= message.detail.findings[0].Severity.Normalized && message.detail.findings[0].Severity.Normalized <= 89) {severity = 'HIGH'; color = '#ed7211';}\n",
                            "else if (90 <= message.detail.findings[0].Severity.Normalized && message.detail.findings[0].Severity.Normalized <= 100) {severity = 'CRITICAL'; color = '#ff0209';}\n",
                            "else {severity = 'INFORMATIONAL'; color = '#007cbc';}\n",
                            "\n",
                            "const attachment = [{\n",
                            "\"fallback\": finding + ` - ${consoleUrl}/home?region=` + `${region}#/findings?search=id%3D${messageId}`,\n",
                            "\"pretext\": `*AWS SecurityHub finding in ${region} for Acct: ${account}*`,\n",
                            "\"title\": `${finding}`,\n",
                            "\"title_link\": `${consoleUrl}/home?region=${region}#/research`,\n",
                            "\n",
                            "\"text\": `${findingDescription}`,\n",
                            "\"fields\": [\n",
                            "{\"title\": \"Severity\",\"value\": `${severity}`, \"short\": true},\n",
                            "{\"title\": \"Region\",\"value\": `${region}`,\"short\": true},\n",
                            "{\"title\": \"Resource Type\",\"value\": `${type}`,\"short\": true},\n",
                            "{\"title\": \"Last Seen\",\"value\": `${lastSeen}`, \"short\": true}\n",
                            "],\n",
                            "\"mrkdwn_in\": [\"pretext\"],\n",
                            "\"color\": color\n",
                            "}];\n",
                            "\n",
                            "const slackMessage = {\n",
                            "channel: slackChannel,\n",
                            "text : '',\n",
                            "attachments : attachment,\n",
                            "username: 'SecurityHub',\n",
                            "'mrkdwn': true,\n",
                            "icon_url: 'https://raw.githubusercontent.com/aws-samples/amazon-securityhub-to-slack/master/images/gd_logo.png'\n",
                            "};\n",
                            "\n",
                            "postMessage(slackMessage, (response) => {\n",
                            "if (response.statusCode < 400) {\n",
                            "console.info('Message posted successfully');\n",
                            "callback(null);\n",
                            "} else if (response.statusCode < 500) {\n",
                            "console.error(`Error posting message to Slack API: ${response.statusCode} - ${response.statusMessage}`);\n",
                            "callback(null);\n",
                            "} else {\n",
                            "callback(`Server error when processing message: ${response.statusCode} - ${response.statusMessage}`);\n",
                            "}\n",
                            "});\n",
                            "}\n",
                            "exports.handler = (event, context, callback) => {\n",
                            "        processEvent(event, callback);\n",
                            "};\n"]]
                      }},
            "Environment" : {
            "Variables" : {
            "slackChannel" : { "Ref" : "SlackChannel" },
            "webHookUrl" : { "Ref": "IncomingWebHookURL" }
            }
        },
        "Runtime": "nodejs8.10",
        "MemorySize" : 128,
                "Timeout": 10,
        "Description" : "Lambda to push SecurityHub findings to Slack",
                "TracingConfig": {
                    "Mode": "Active"
                }
        }
    }
    }
}
